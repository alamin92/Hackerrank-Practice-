
#include<bits/stdc++.h>

using namespace std;

class Box{
    private:
    int l, b, h;
    public:
    Box(){
        l = 0;
        b = 0;
        h = 0;
    }
    Box(int length, int breadth, int height){
        l = length;
        b = breadth;
        h = height;
    }
    Box(Box &B){
      l=B.l;
      b=B.b;
      h=B.h;

    }

    int get_length(){
      return l;
    }
    int get_breadth(){
      return b;
    }
    int get_height(){
      return h;
    }
    long long get_volume(){
      return (l*b*h);
    }

    bool operator < (Box &B){


    }



    //  * important    operator overloading is some sort of adding, comparing, and etc between objects 
/*
    //basic concepts  of operator overlopading 

[return datatype]such as int, void, boolean          
     operator        symbol such as +, >,<./
( argument-list)
    //. . 



    friend ostream *this is for output and referrence is to the operator &operator <<(ostream is for insertion and referrence to a name &output *u can name anything here instead of putput like out etc and, person which is class and referrence & to the box or whatever u name it)
    {

      ouput << "what the hack"<<endl;
      output<< p.nane << p.age; 
    }

    or

    friend istream &operator>>(istream is to extration istream &input, person &p )

    input >> p.name >> p.age;
    retun input;

    friend istream
    
    so how does it work the friend function?. 


  int main(){
    person anil; //create a object anil and takes the valie for that such as age  whatver u have created before. 

    cin>>anil; // and here with the object *anil and help with the istream 
  }



*/




/*
class Box{
    private:
    int l, b, h;
    public:
    Box(){
        l = 0;
        b = 0;
        h = 0;
    }
    Box(int length, int breadth, int height){
        l = length;
        b = breadth;
        h = height;
    }
    Box(const Box& B){
        l = B.l;
        b = B.b;
        h = B.h;
    }
    
    int getLenght(){
        return l;
    }
    int getBreadth(){
        return b;
    }
    int getHeight(){
        return h;
    }
    long long CalculateVolume(){
        return (long long)l*b*h;
    }
    
    friend bool operator < ( Box&A,Box& B){
        if( (A.l < B.l) || ((A.b < B.b) && (A.l == B.l)) || ((A.h < B.h) && (A.l == B.l) && (A.b == B.b)) ){
            return true;
        }else{
            return false;
        }
    };
    
    friend ostream& operator<< (ostream& output, const Box& B){
        output << B.l << " " << B.b << " " << B.h;
        return output;
    }
};
*/


/*
class Box
{
    public:
    int l,b,h;
    
    Box()
    {
        l=0; b=0; h=0;
    }
    Box(int length, int breadth, int height)
    {
        l=length; b=breadth; h=height;
    }
    Box(Box &B)
    {
        l = B.l; b = B.b; h = B.h;
    }
    
    int getLength()
    {
        return l;
    }
    int getBreadth()
    {
        return b;
    }
    int getHeight()
    {
        return h;
    }
    long long CalculateVolume()
    {
        return (l*b*h);
    }
    
    bool operator<(const Box& B) 
    {
        if (l < B.l)
            return true;
        
        if (b < B.b && l == B.l)
            return true;
        
        if (h < B.h && l == B.l && b == B.b)
            return true;
        
        return false;
    }
};

ostream& operator<<(ostream& out, const Box& B)
{
    out << B.l << " " << B.b << " " << B.h; 
    return out;
}
*/

/*
class Box{

private:
int l, b, h;
public:
Box(){
    this->l = 0;
    this->b = 0;
    this->h = 0;
}
Box(int x1, int x2, int x3){
    this->l = x1;
    this->b = x2;
    this->h = x3;
}
Box(Box &b){
    this->l = b.l;
    this->b = b.b;
    this->h = b.h;
}
int getLength(){ return l;}
int getBreadth(){ return b; }
int getHeight() { return h; }
long long CalculateVolume(){
    return (long long) l * b * h;
}
bool operator < (Box &b){
    if(this->l < b.l){
        return true;
    }
    else if(this->l == b.l && this->b < b.b){
        return true;
    }
    else if(this->h < b.h && this->l == b.l && this->b == b.b){
        return true;
    }
    return false;
}
friend ostream& operator <<(ostream& out, const Box& b){
    out << b.l << " " << b.b << " " << b.h;
    return out;
}
};
*/
void check2()
{
	int n;
	cin>>n;
	Box temp;
	for(int i=0;i<n;i++)
	{
		int type;
		cin>>type;
		if(type ==1)
		{
			cout<<temp<<endl;
		}
		if(type == 2)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			temp=NewBox;
			cout<<temp<<endl;
		}
		if(type==3)
		{
			int l,b,h;
			cin>>l>>b>>h;
			Box NewBox(l,b,h);
			if(NewBox<temp)
			{
				cout<<"Lesser\n";
			}
			else
			{
				cout<<"Greater\n";
			}
		}
		if(type==4)
		{
			cout<<temp.CalculateVolume()<<endl;
		}
		if(type==5)
		{
			Box NewBox(temp);
			cout<<NewBox<<endl;
		}

	}
}

int main()
{
	check2();
}

